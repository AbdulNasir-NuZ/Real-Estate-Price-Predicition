# -*- coding: utf-8 -*-
"""Real Estate Price Predicition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CuWquAdIArRnfoYDkM3GXyUvMdU-Zf_V
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

# Loading the datasets for prediction
#boston = load_boston()
#df = pd.DataFrame(boston.data)

"""# Problem statements

* you have been given a dataset that describe the functionality of Real estate.Now, Based on the given features, you have to predict the real Estate price.

#Defining a DataFrame

Link : https://drive.google.com/file/d/1yrVwfX1LjISQ6vdR1Kaht-S1_8y2Gk6z/view
"""

df =pd.read_csv('/content/drive/MyDrive/DataSet/Housing.csv')



"""# EDA = Exploratory data Analysis"""

df.head()

df.tail()

df.shape[0]

df.shape[1]

len(df.columns)

df.columns

df.info()

df.dtypes

df.nunique()

df.isnull().sum()

df.isnull().sum().sum()

df.head()

df.mainroad.unique()

df.mainroad.value_counts()

#YES -- 1; NO --> 0;

newdf = df.copy()

newdf.mainroad.replace(['yes','no'],[1,0]).value_counts()

#permanent change
newdf.mainroad.replace(['yes','no'],[1,0], inplace=True)

newdf.mainroad.dtypes

#mainroad
df.mainroad.replace(['yes','no'],[1,0], inplace=True)

df.mainroad.dtypes

#guestroom
df.guestroom.replace(['yes','no'],[1,0], inplace=True)

df.guestroom.unique()

df.guestroom.value_counts()

df.guestroom.dtypes

#basement
df.basement.replace(['yes','no'],[1,0], inplace=True)

df.basement.unique()

df.basement.value_counts()

df.basement.dtypes

#hotwaterheating
df.hotwaterheating.replace(['yes','no'],[1,0], inplace=True)

df.hotwaterheating.unique()

df.hotwaterheating.value_counts()

df.hotwaterheating.dtypes

#airconditioning
df.airconditioning.replace(['yes','no'],[1,0], inplace=True)

df.airconditioning.unique()

df.airconditioning.value_counts()

df.airconditioning.dtypes

#prefarea
df.prefarea.replace(['yes','no'],[1,0], inplace=True)

df.prefarea.unique()

df.prefarea.value_counts()

df.info

df.head()

df.furnishingstatus.unique()

df.furnishingstatus.value_counts()

#furnishingstatus
df.furnishingstatus.replace(['unfurnished','furnished','semi-furnished'],[0,1,2], inplace=True)

df.head()



"""#Observations:


1.   Data Strength -545;
2.   Number of Random variable -13;
3.   None of the columns contains Null Values;
4.    Columns --, has numerical and object Values;
"""

df.shape

"""# Manipulation:



1.   changed the categorical value to numerical values for the columns(mainroad,	guestroom,	basement,	hotwaterheating,	airconditioning,	parking,	prefarea,	furnishingstatus)


"""

df.dtypes

df.describe()

df.corr()

plt.figure(figsize=(10,10))
sns.heatmap(df.corr(), annot=True, cmap='Blues')

plt.scatter(df.area, df.price)

sns.pairplot(df)

plt.figure(figsize=(50,50))
df.boxplot()

df[['area']].boxplot()

df[['bedrooms']].boxplot()

#How many values are there where bedrooms is more than 4
df.bedrooms.loc[df.bedrooms > 4]

df.bedrooms.loc[df.bedrooms > 4].value_counts().sum()

#How many values are there where mainroad is more than 4
df.mainroad.loc[df.mainroad > 4].value_counts().sum()

len(df.mainroad.loc[df.mainroad == 0])

sns.histplot(df.price)

df.head()

df.basement.value_counts().plot.bar()

# what is the price of the house where bedrooms are 4 and bathroom is 2
df.loc[df.bedrooms == 4, ['price','bedrooms','bathrooms']][df.bathrooms == 2]

"""# Importing libraries"""



"""# Splitting the dataset"""

x=df.drop('price', axis=1)
y= df.price

df[df.columns[1:]]

df[:]

df[['price']]

df.drop('price', axis=1)

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state=None)

len(x_train)

len(x_test)

len(y_train)

len(y_test)

"""#Choosing the Model

"""

model = LinearRegression()

"""# Fitting / Training the Model"""

model.fit(x_train, y_train)

#intercept value (cost function)
model.intercept_

#coeffecient Value
model.coef_

"""

# Prediction"""

y_test

pred_y= model.predict(x_test)

pred_y

newdf= pd.DataFrame({"Actual Value": y_test, "Predicted Value":pred_y})

newdf

plt.scatter(newdf['Actual Value'], newdf['Predicted Value'])
plt.xlabel('Actual Value')
plt.ylabel('Predicted Value')
plt.title("Actual Value v/s Predicted Value")

newdf.corr()

sns.heatmap(newdf.corr(), annot = True,cmap ='magma')

plt.scatter(x_test.area, y_test)
plt.plot(x_test.area, pred_y, color="red")

"""# Testing the Model Performance"""

r2_score(y_test, pred_y)